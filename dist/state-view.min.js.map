{"version":3,"sources":["state-view.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_process","nextTick","callback","setTimeout",2,"EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","Array","apply","slice","addListener","listener","m","newListener","push","warned","console","trace","on","once","g","removeListener","fired","list","position","splice","removeAllListeners","key","ret","listenerCount","emitter",3,"$state","$viewManager","$templateCache","$compile","$log","restrict","scope","link","element","attrs","_view","create","id","$element","render","data","renderer","html","$parent","reset","destroy",4,"angular","factory","directive","./directives/state-view","./services/view-manager",5,"View","process","$injector","$q","_self","_viewHash","_activeList","_promiseTemplate","template","view","promise","resolve","reject","when","invoke","then","res","deferEmpty","defer","_update","forEach","current","templateHash","templates","templateList","Object","keys","filter","map","all","err","_unregister","_register","get","update","$use","request","next","../../node_modules/angular-state-router/src/utils/process","../view/view","events",6,"child","extend"],"mappings":"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","file":"state-view.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n/* global process:false */\n/* global setImmediate:false */\n/* global setTimeout:false */\n\nvar _process = {\n  nextTick: function(callback) {\n    setTimeout(callback, 0);\n  }\n};\n\nmodule.exports = _process;\n},{}],2:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = ['$state', '$viewManager', '$templateCache', '$compile', '$log', function ($state, $viewManager, $templateCache, $compile, $log) {\n\n  return {\n    restrict: 'EA',\n    scope: {\n\n    },\n    link: function(scope, element, attrs) {\n\n      // Create view\n      var _view = $viewManager.create(attrs.id, {\n\n        // Element\n        $element: element,\n\n        // Render\n        render: function(data) {\n          var renderer = $compile(data);\n          element.html(renderer(scope.$parent));\n        },\n\n        reset: function() {\n          element.html('');\n        }\n      });\n\n      // Destroy\n      element.on('$destroy', function() {\n        _view.destroy();\n      });\n    }\n  };\n}];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/* global angular:false */\n\n// CommonJS\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'angular-state-view';\n}\n\n// Assume polyfill used in StateRouter exists\n\n// Instantiate module\nangular.module('angular-state-view', ['angular-state-router'])\n\n  .factory('$viewManager', require('./services/view-manager'))\n\n  .directive('sview', require('./directives/state-view'));\n\n},{\"./directives/state-view\":3,\"./services/view-manager\":5}],5:[function(require,module,exports){\n'use strict';\n\n/* global window:false */\n\nvar EventEmitter = require('events').EventEmitter;\nvar View = require('../view/view');\nvar process = require('../../node_modules/angular-state-router/src/utils/process');\n\nmodule.exports = ['$state', '$injector', '$q', function($state, $injector, $q) {\n\n  // Instance of EventEmitter\n  var _self = new EventEmitter();\n\n  var _viewHash = {};\n  var _activeList = [];\n\n  /**\n   * A promise to fulfill view template translation\n   * \n   * @param  {String} id       Unique identifier for view\n   * @param  {Mixed}  template A state defined template to render into the view\n   * @param  {View}   view     A View associated with the id\n   * @return {Promise}         A $q.defer().promise\n   */\n  var _promiseTemplate = function(id, template, view) {\n    var promise;\n\n    // Defined template\n    if(typeof template !== 'undefined' && template !== null) {\n\n      // Functional\n      if(angular.isFunction(template)) {\n        promise = $q(function(resolve, reject) {\n\n          // Execute asynchronously\n          process.nextTick(function() {\n\n            // Ensure promise\n            $q.when($injector.invoke(template)).then(\n              function(res) {\n                view.render(res);\n                resolve(res);\n              }\n            );\n\n          });\n        });\n\n      // Other\n      } else {\n\n        // Ensure promise\n        promise = $q.when('<ng-include src=\"\\''+template+'\\'\"></ng-include>').then(function(res) {\n          view.render(res);\n        });\n      }\n\n    // Empty\n    } else {\n      var deferEmpty = $q.defer();\n\n      // Resolve\n      deferEmpty.resolve();\n\n      promise = deferEmpty.promise;\n    }\n\n    return promise;\n  };\n\n  /**\n   * Update rendered views\n   *\n   * @param {Function} callback A completion callback, function(err)\n   */\n  var _update = function(callback) {\n    // Reset\n    _activeList.forEach(function(view) {\n      view.reset();\n    });\n\n    // Current\n    var current = $state.current() || {};\n    var templateHash = current.templates || {};\n    var templateList = (Object.keys(templateHash) || [])\n      .filter(function(id) {\n        return !!_viewHash[id];\n      });\n\n    // Active views\n    _activeList = templateList\n      .map(function(id) {\n        return _viewHash[id];\n      });\n\n    // Render execution\n    if(!!templateList.length) {\n      $q.all(templateList\n\n        // Map to provider\n        .map(function(id) {\n          return _promiseTemplate(id, templateHash[id], _viewHash[id]);\n        }))\n        .then(function() {\n          _self.emit('update:render');\n          process.nextTick(callback);\n\n        }, function(err) {\n          _self.emit('error:render', err);\n          callback(err);\n        });\n\n    // Empty\n    } else {\n      _self.emit('update:render');\n      process.nextTick(callback);\n    }\n  };\n\n  /**\n   * Unregister a view\n   * \n   * @param  {String}       id Unique identifier for view\n   * @return {$viewManager}    Itself, chainable\n   */\n  var _unregister = function(id) {\n    delete _viewHash[id];\n  };\n\n  /**\n   * Register a view, also implements destroy method on view to unregister from manager\n   * \n   * @param  {String}       id   Unique identifier for view\n   * @param  {View}         view A view instance\n   * @return {$viewManager}      Itself, chainable\n   */\n  var _register = function(id, view) {\n    // No id\n    if(!id) {\n      throw new Error('View requires an id.');\n\n    // Require unique id\n    } else if(_viewHash[id]) {\n      throw new Error('View requires a unique id');\n\n    } else {\n      _viewHash[id] = view;\n    }\n\n    // Implement destroy method\n    view.destroy = function() {\n      _unregister(id);\n    };\n\n    return view;\n  };\n\n  /**\n   * A factory method to create a View instance\n   * \n   * @param  {String} id   Unique identifier for view\n   * @param  {Object} data A data object used to extend abstract methods\n   * @return {View}        A View entitity\n   */\n  _self.create = function(id, data) {\n    data = data || {};\n\n    // Create\n    var view = View(id, data);\n\n    // Register\n    return _register(id, view);\n  };\n\n  /**\n   * Get a view by id\n   * \n   * @param  {String} id Unique identifier for view\n   * @return {View}      A View entitity\n   */\n  _self.get = function(id) {\n    return _viewHash[id];\n  };\n\n  /**\n   * Update\n   */\n  _self.update = _update;\n\n  // Register middleware layer\n  $state.$use(function(request, next) {\n    _update(next);\n  });\n\n  return _self;\n}];\n\n},{\"../../node_modules/angular-state-router/src/utils/process\":1,\"../view/view\":6,\"events\":2}],6:[function(require,module,exports){\n'use strict';\n\n/**\n * View\n *\n * @param  {String} id      Unique identifier for view\n * @param  {Object} child   A data object used to extend abstract methods\n * @return {View}           An abstract view object\n */\nmodule.exports = function(id, child) {\n  // Instance\n  var _self;\n  _self = {\n\n    /**\n     * Abstract render\n     */\n    render: function() { },\n\n    /**\n     * Abstract reset\n     */\n    reset: function() { },\n\n    /**\n     * Abstract destroy\n     */\n    destroy: function() { }\n\n  };\n\n  // Extend to overwrite abstract methods\n  angular.extend(_self, child);\n\n  return _self;\n};\n\n},{}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"sourceRoot":"/source/"}